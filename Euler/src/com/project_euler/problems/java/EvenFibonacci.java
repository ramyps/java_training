/**
 * 
 */
package com.project_euler.problems.java;

import java.math.BigInteger;
import java.util.Scanner;

/**
 * @author Ramy
 *Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
input == 10000
4613732

 */
public class EvenFibonacci {

	//	private static int fibs[];


	/**
	 * @param args
	 */
	static Scanner scan = new Scanner(System.in);

	public static void main(String[] args) 
	{
		long starttime = System.currentTimeMillis();
		int no = scan.nextInt();
		BigInteger fib = fib(no);		
		System.out.println(fib);

		long endtime=System.currentTimeMillis();
		System.out.println("Time taken: "+(endtime-starttime));
	}

	private static BigInteger fib(int n) {
		BigInteger a = BigInteger.valueOf(0); 
		BigInteger b = BigInteger.valueOf(1); 
		BigInteger c = BigInteger.valueOf(1); 
		BigInteger even = BigInteger.valueOf(0); 
		BigInteger m4 = BigInteger.valueOf(4000000);
		int res;
		for (int j=2 ; j<=n ; j++) 
		{ 
			c =  a.add(b); 
			//System.out.println(c);
			if(c.compareTo(m4)==-1) {
			if(c.getLowestSetBit()!=0) {
				//	System.out.println("Even: "+c);
				even = even.add(c);
			}}
			a = b; 
			b = c; 
		} 

		return (even); 

	}

}
